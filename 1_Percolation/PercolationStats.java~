public class PercolationStats {
    private int N;
    private int T;
    private double[] results; 
    
    private static final int START_IND = 1;
    
   public PercolationStats(int N, int T)    // perform T independent computational experiments on an N-by-N grid
   {
       if (N<= 0 || T<= 0)
       {
           throw new java.lang.IllegalArgumentException();
       }
       this.N = N;
       this.T = T;
       this.results = new double[T];
       this.performMultipleExperiments();      
       
   }
   
   
   /**
     * 
     */ 
   private void performMultipleExperiments()
   {
       double gridArea = (double) this.N*this.N;
       for (int i = 0; i< this.T; i++)
       {
           results[i] = performSingleExp() / gridArea;
       }
   }
   
   /**
     * @return number of opened sites for which system starts percolate
   */
   private int performSingleExp()
   {
      
       Percolation perc = new Percolation(this.N);
       
       int count = 0;
       
       // repeat until starts percolate
       while (!perc.percolates())
       {
           int i;
           int j;
           //try to find closed site 
           do 
           {
               i = StdRandom.uniform(this.N) + START_IND;
               j = StdRandom.uniform(this.N) + START_IND;
               //StdOut.println(i + " " + j);
           }
           while (perc.isOpen(i,j));
           
           perc.open(i, j);
           count ++;          
               
       }
       return count;
   }
   
   public double mean()                     // sample mean of percolation threshold
   {
       return StdStats.mean(this.results);
   }
   public double stddev()                   // sample standard deviation of percolation threshold
   {
       return StdStats.stddev(this.results);
   }
   public double confidenceLo()             // returns lower bound of the 95% confidence interval
   {
       return this.mean() - (1.96*this.stddev())/Math.sqrt(T);
   }
   public double confidenceHi()             // returns upper bound of the 95% confidence interval
   {
       return this.mean() + (1.96*this.stddev())/Math.sqrt(T);
   }
   
   public static void main(String[] args)   // test client, described below
   {
       int N = Integer.parseInt(args[0]);     //  N-by-N grid
       int T = Integer.parseInt(args[1]);     // T independent computational experiments
       PercolationStats perStats = new PercolationStats(N, T);
       StdOut.println("mean = " + perStats.mean());
       
   }
}